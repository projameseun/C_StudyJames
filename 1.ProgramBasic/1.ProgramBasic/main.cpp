#include <iostream>
/*
	프로그래밍이란: 프로그램을 만드는 행위를 말한다. 간단히 개발이라고 부른다
	조금더 유식하게 말을 하게 되면 하나 이상의 관련된 추상 알고리즘을 특정한 프로그래밍 언어를 이용해 구체적인 프로그램을 구현하는 기술이다.
	이 때사용 하는 언어들을 프로그래밍 언어라고 부른다.

	알고리즘이란? 
	컴퓨터 과학 및 수학에서 사용되는 중요한 개념중 하나이다.
	간단히 말해서 문제를 해결하기 위한 일련의 단계나 규칙의 집합이다.
	이러한 단계들은 명확하고 순서대로 실행되어야 하며 ,주어진 입력에 대해 올바른 출력을 생성해야 된다.
	알고리즘을 통해서 효율적으로 해결할수 있다 
	ex)검색알고리즘은 특정 항목을 찾는방법을 정의하고, 정렬알고리즘은 데이트를 특정기준에 따라 정렬하는 방법을 제공한다 
	좋은 알고리즘은 입력크기에 상관없이 일정한 시간 내에 문제를 해결할수 있는 효율성을 갖추는게 중요하다.

	대표적인 언어 =>> c,c++,java,python등 ...
	c에서 파생되서 나온게 c++이다
	c++ 과 비슷한 언어가 java이다.

	프로그래밍을 우리가 배울때 처음에는 외워야 되는게 많다. 프로그래밍도 하나의 언어이기때문에 정해진 규칙이 잇다. ( 정해진 문법들은 이해도 하겠지만 외워야되는 영역이다)
	프로그래밍을 결론적으로 외워야되는건 외워야되고 이해해야되는건 이해해야 된다. 중요한건 외우면서 정확하게 하나를 알아도 이해를 하는게 중요하다.

	절차지향언어,객체지향언어

	c는 절차지향식 언어이다.
	절차지향식 언어는 모든게 순서대로 이루어 진다.(위에서 아래로)
	장점:객체지향 언어에 비해 속도가 현저히 빠르다.
	단점:유지 보수가 어렵다. 실행순서가 정해져 있으므로 코드의 순사가 바뀌게 된다면 동일 한 결과를 가져오기 어렵다.
	디버깅을 하기도 어렵다(버그를 찾기 어렵다)

	c++는 객체지향식 언어이다.
	객체==>세상에 존재하는 모든 것을 의미한다. 예를들어 사물이나 생명체 등을 말한다.
	물,컴퓨터,휴지,축구공,고양이,강아지,자동차 등 모든 사물 ,생명체들이 해당이 된다.

	컴퓨터로 예를들어 보면
	pc한대를 완성시킨다고 가정해보자 
	CPU,RAM,MotherBoard,SSD,HDD,VAG(그래픽카드),POWER,CASE등 여러가지 부품들이 존재 한다.
	여기서 컴퓨터의 부품들을 객체라고 생각해보자.
	만약에 HDD부품쪽에서 문제가 생겼다고 가정해보자. 그러면 HDD만 교체하게 되면 간단히 해결을 할수 있게 된다. 
	나머지 다른부품들은 건드릴 필요가 없다.
	어떤 부품이 고장 났을때 전체를 고치는것이 아니라 그 해당 부품만 교체하면 해결 할수 있기때문에 유지보수가 매우좋다.
	
	또 다른예로 로보트가 있는데 로보트의 오른쪽 다리가 고장났을때 로보트전체를 고치냐 또는 로보트의 다리하나만 고치고 모든게 해결되냐 누가봐도 후자가 유지보수가 좋다.
	
	객체지향언어를 사용하는 이유
	
	캡슐화,상속,다형성 

	

	
	

*/


int main()
{
	return 0;
}